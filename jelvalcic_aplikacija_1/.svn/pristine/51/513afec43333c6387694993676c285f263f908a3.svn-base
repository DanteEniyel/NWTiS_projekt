/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.foi.nwtis.jelvalcic.aplikacija_1;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletContext;
import org.foi.nwtis.jelvalcic.web.kontrole.KorisnickaKonfiguracija;

/**
 * Klasa Posrednik
 * @author jelvalcic
 */
public class Posrednik extends Thread{
    private int port;    
    private ServletContext context;
    private ObradaMeteoPodataka obradaMeteoPodataka;
    private KorisnickaKonfiguracija konfig; 
    private static boolean kraj=false;
    private static boolean pauza;
    private static boolean adminAktivan = false;
    
/**
 * Konstruktor Posrednik
 * @param konfig datoteka postavki
 */

    public Posrednik(int port,KorisnickaKonfiguracija konfig) {
        this.konfig = konfig;
        this.port = port;      
    }

/**
 * Pokreće se server i otvara se socket, te se čeka javljanje klijenta
 */
    public void pokreniJednostavniPosluzitelj(){
        try {
            try (ServerSocket server = new ServerSocket(port)) {
                while(!kraj){
                    Socket klijent = server.accept();
                    JednostavniPosluzitelj dretva = new JednostavniPosluzitelj(klijent, konfig);
                    dretva.setName("JednostavniPosluzitelj" + new Date().toString());
                    dretva.start(); 
                } 
            }
        } catch (IOException ex) {
            Logger.getLogger(Posrednik.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public synchronized void start() {
        super.start(); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void run() {
        super.run(); //To change body of generated methods, choose Tools | Templates.
        pokreniJednostavniPosluzitelj();
    }

    @Override
    public void interrupt() {
          kraj=false;
        super.interrupt(); //To change body of generated methods, choose Tools | Templates.
      
    }

/**
 * Provjera da li je server završio s radom
 * @return vraća se informacija da li je došla naredba za kraj rada
 */
    public static boolean isKraj() {
        return kraj;
    }

/**
 * Postavljanje zastavice koja govori da je server završio s radom
 * @param kraj vraća se vrijednost zastavice
 */
    public static void setKraj(boolean kraj) {
        Posrednik.kraj = kraj;
    }

/**
 * Provjera da li je server pauziran
 * @return vraća se informacije da li je došla naredba za pauzu rada
 */
    public static boolean isPauza() {
        return pauza;
    }

/**
 * Postavljanje zastavice koja govori da je server pauziran
 * @param pauza vraća se vrijednost zastavice
 */
    public static void setPauza(boolean pauza) {
        Posrednik.pauza = pauza;
    }

    public static boolean isAdminAktivan() {
        return adminAktivan;
    }

    public static void setAdminAktivan(boolean adminAktivan) {
        Posrednik.adminAktivan = adminAktivan;
    }
    
    
    public ObradaMeteoPodataka getObradaMeteoPodataka() {
        return obradaMeteoPodataka;
    }
}
